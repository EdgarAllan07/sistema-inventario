generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model sysdiagrams {
  name         String  @db.VarChar(128)
  principal_id Int
  diagram_id   Int     @id(map: "pk__sysdiagr__c2b05b61a59d49c0") @default(autoincrement())
  version      Int?
  definition   Bytes?
  trial278     String? @db.Char(1)

  @@unique([principal_id, name], map: "uk_principal_name")
}

model categorias {
  id_categoria Int          @id(map: "pk_categorias") @default(autoincrement())
  nombre       String?      @db.VarChar(50)
  id_producto  Int?
  id_proveedor Int?
  trial271     String?      @db.Char(1)
  proveedores  proveedores? @relation(fields: [id_proveedor], references: [id_proveedor], onDelete: NoAction, onUpdate: NoAction, map: "fk_categorias_proveedores")
  ofertas      ofertas[]
  productos    productos[]
}

model clientes {
  id_cliente    Int             @id(map: "pk_clientes") @default(autoincrement())
  nombre        String?         @db.VarChar(50)
  apellido      String?         @db.VarChar(50)
  dui           String?         @db.VarChar(50)
  direccion     String?         @db.VarChar(50)
  telefono      String?         @db.VarChar(50)
  email         String?         @db.VarChar(50)
  trial274      String?         @db.Char(1)
  venta_detalle venta_detalle[]
}

model existencia {
  id_existencias Int        @id(map: "pk_existencia") @default(autoincrement())
  id_sucursal    Int?
  existencias    Int?
  id_producto    Int?
  trial274       String?    @db.Char(1)
  productos      productos? @relation(fields: [id_producto], references: [id_producto], onDelete: NoAction, onUpdate: NoAction, map: "fk_existencia_productos")
  sucursal       sucursal?  @relation(fields: [id_sucursal], references: [id_sucursal], onDelete: NoAction, onUpdate: NoAction, map: "fk_existencia_sucursal")
}

model ofertas {
  id_oferta     Int             @id(map: "pk_ofertas") @default(autoincrement())
  id_producto   Int?
  descuento     Float?
  precio_oferta Float?
  fecha_inicial DateTime?       @db.Date
  fecha_fin     DateTime?       @db.Date
  id_categoria  Int?
  trial274      String?         @db.Char(1)
  categorias    categorias?     @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction, map: "fk_ofertas_categorias")
  productos     productos?      @relation(fields: [id_producto], references: [id_producto], onDelete: NoAction, onUpdate: NoAction, map: "fk_ofertas_productos")
  venta_detalle venta_detalle[]
}

model productos {
  id_producto  Int          @id(map: "pk_productos") @default(autoincrement())
  nombre       String?      @db.VarChar(50)
  descripcion  String?      @db.VarChar(100)
  precio       Float?
  categoria    String?      @db.VarChar(50)
  existencias  Int?
  id_categoria Int?
  id_proveedor Int?
  trial274     String?      @db.Char(1)
  existencia   existencia[]
  ofertas      ofertas[]
  categorias   categorias?  @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction, map: "fk_productos_categorias")
  proveedores  proveedores? @relation(fields: [id_proveedor], references: [id_proveedor], onDelete: NoAction, onUpdate: NoAction, map: "fk_productos_proveedores")
}

model proveedores {
  id_proveedor Int          @id(map: "pk_proveedores") @default(autoincrement())
  nombre       String?      @db.VarChar(50)
  telefono     String?      @db.VarChar(50)
  direccion    String?      @db.VarChar(50)
  email        String?      @db.VarChar(50)
  id_producto  Int?
  trial271     String?      @db.Char(1)
  categorias   categorias[]
  productos    productos[]
}

model sucursal {
  id_sucursal   Int             @id(map: "pk_existencias") @default(autoincrement())
  direccion     String?         @db.VarChar(50)
  existencias   Int?
  trial274      String?         @db.Char(1)
  existencia    existencia[]
  venta_detalle venta_detalle[]
}

model tipo_documento {
  id_documento  Int             @id(map: "pk_tipo_documento") @default(autoincrement())
  tipo          String?         @db.VarChar(50)
  trial278      String?         @db.Char(1)
  venta_detalle venta_detalle[]
}

model usuarios {
  id_usuario Int     @id(map: "pk_usuarios") @default(autoincrement())
  contra     String?
  nombre     String? @db.VarChar(50)
  apellido   String? @db.VarChar(50)
  email      String? @db.VarChar(25)
  celular    String? @db.VarChar(10)
  trial278   String? @db.Char(1)
}

model venta {
  id_venta         Int           @id(map: "pk_venta") @default(autoincrement())
  precio           Float?
  cantidad         Int?
  id_venta_detalle Int?
  trial278         String?       @db.Char(1)
  venta_detalle    venta_detalle @relation(fields: [id_venta], references: [id_venta_detalle], onDelete: NoAction, onUpdate: NoAction, map: "fk_venta_venta_detalle")
}

model venta_detalle {
  id_venta_detalle Int             @id(map: "pk_venta_detalle") @default(autoincrement())
  fecha_venta      DateTime?
  id_cliente       Int?
  id_sucursal      Int?
  subtotal         Float?
  total            Float?
  descuento        Float?
  iva              Float?
  id_documento     Int?
  id_oferta        Int?
  trial278         String?         @db.Char(1)
  venta            venta?
  clientes         clientes?       @relation(fields: [id_cliente], references: [id_cliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_venta_detalle_clientes")
  ofertas          ofertas?        @relation(fields: [id_oferta], references: [id_oferta], onDelete: NoAction, onUpdate: NoAction, map: "fk_venta_detalle_ofertas")
  sucursal         sucursal?       @relation(fields: [id_sucursal], references: [id_sucursal], onDelete: NoAction, onUpdate: NoAction, map: "fk_venta_detalle_sucursal")
  tipo_documento   tipo_documento? @relation(fields: [id_documento], references: [id_documento], onDelete: NoAction, onUpdate: NoAction, map: "fk_venta_detalle_tipo_documento")
}
